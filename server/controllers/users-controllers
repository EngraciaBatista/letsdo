const { validationResult } = require("express-validator");
const User = require("../models/User");
//const HttpError = require("../models/http-error");

const createUser = async (req, res, next) => {
    
    const {name, email, completed, picture, created, hashed_password } = req.body;

    const newUser = new User({
        name,
        email,
        completed,
        picture,
        created,
        hashed_password
    });

    try {
        await newUser.save();
    } catch(err) {
        return next("Failed to create user. Please try again.");
    }

    res.status(201).json({user: newUser});
}


const displayUsers = async (req, res, next) => {
    let users;
  
    try {
      users = await User.find({}, "-hashed_password");
    } catch (err) {
      return res.status(500).json({ message: "Unable to retrieve users, please try again later." });
    }

    res.status(200).json({
      users: users.map(user => user.toObject({ getters: true }))
    });
  };
  

// TODO: This won't work with the hashed password. We need another module to handle that OR we have to change the password field.


/* const login = async (req, res, next) => {
    const errors = validationResult(req);

    const {email, password} = req.body;

      let existingUser;

      try {
        existingUser = await User.findOne({ email: email});
      } catch (err) {
        return res.status().json({message: "Login Failed."}); 
      }

      if(!existingUser) {
        return res.status().json({message: "User does not exist. Please create an account."});
      }

      if (existingUser.hashed_password !== password) {
        return res.status.json({message: "Invalid password. Please try again."});
      }
      res.json({ message: "Successfully logged in!", userID: existingUser.id })



} */
  
exports.createUser = createUser;
exports.displayUsers = displayUsers;

